indent_current=0
indent_last=0
stack=()

getindent(){
  echo "$1" | sed "s/\n/ /g" | awk '{ match($0, /^ */); printf("%d", RLENGTH) }' | sed 's/00/0/g'
}

push (){ 
  var="$1"; shift 1; eval "$var+=($(printf "'%s' " "$@"))"; 
}

makeindent(){  
  for((i=0;i<$1;i++)); do printf " "; done
}

stack_pop(){
  index=${#stack[@]}
  index=$((index-1))
  [[ $index == "-1" ]] && return 0
  lastitem="${stack[$index]}"
  unset stack["$index"]
  echo -e "$(makeindent $((indent_last-2)) )$lastitem"
  if ! (( (indent_last-2) == indent_current )); then 
    indent_last=$((indent_last-2))
    stack_pop
  fi
}

stack_update(){
  indent_last="$indent_current"
  indent_current=$(getindent "$1")
  #echo ">> $indent_last|$indent_current|stacksize:${#stack[@]}"
  if ((indent_current < indent_last)); then stack_pop; fi
}

transpile_all(){
  cat - | while IFS="" read line; do
    i=$(getindent "$line")
    [[ "$line" =~ "={}" ]] && echo "$(makeindent $i)declare -A ${line/=\{\}/}" && continue
    [[ "$line" =~ "=[]" ]] && echo "$(makeindent $i)declare -a ${line/=\[\]/}" && continue
    [[ "$line" =~ \$[A-Za-z_0-9] ]] && line="$(echo "$line" | sed -E 's/([ =])\$([a-zA-Z_0-9]+)/\1"$\2"/gi' )"
    echo "$line"
  done
}

transpile_for(){
  push stack "done"
  local arr="$(echo "$1" | awk '{ print $4 }' )"
  local i=$(( $(getindent "$code") + 2 ))
  code="$1; do"
  # iterate over associative array
  [[ "$code" =~ " of" ]] && [[ "$code" =~ [a-zA-Z_0-9],[a-zA-Z_0-9] ]] && {
    local key="$(echo "$code" | awk '{ print $2 }' | awk -F',' '{ print $1 }')"
    local value="$(echo "$code" | awk '{ print $2 }' | awk -F',' '{ print $2 }')"
    code="$code\n$(makeindent $i)$value=\"\${$arr[\$$key]}\""
    code="${code/,$value/}"
    code="${code/ of / in }"
    code="${code/ $arr/ \"\${!$arr\[@\]\}\"}";
  }
  # iterate over indexed array
  [[ "$code" =~ " in "[a-zA-Z_] ]] && {
    local key="$(echo "$code" | awk '{ print $2 }')"
    code="${code/ $arr/ \"\${$arr\[@\]\}\"}"
  }
  echo -e "$code" | transpile_all
}

transpile_if(){
  push stack "fi"
  code="${1/if not/if \!}"
  code="${code/if /if [[ }"
  code="${code/then/\]\]; then}"
  code="${code/ is / == }"
  echo "$code" | transpile_all
}

